

## sym_tri_num(num) returns symmetric trinary number that has the length of
##                  num.
## sym_tri_num: Nat -> (listof Str)
## Restriction: n>=1

##Examples:
## sym_tri_num(1) =>['0', '1', '2']
## sym_tri_num(3) =>['000','010','020','101','111','121','202','212','222']
## sym_tri_num(4),
##  => ['0000','0110','0220','1001','1111','1221','2002','2112','2222']
import check
##Body
def sym_tri_num(num):
    if num == 0:
        return []
    elif num % 2 == 0:
        return even_double(0, list_create(3**(num/2), 0, [], int(num/2)))
    else:
        return odd_double(0, even_double(0, list_create(3**((num+1)/2), 0, [], int((num+1)/2))))
    

## even_double(count, lst) returns (listof Str) for the even num in sym_tri_num
## even_double: Nat (listof Str) -> (listof Str)
def even_double(count, lst):
    if count == len(lst):
        return lst
    else:
        lst[count] = lst[count] + ((lst[count])[::-1])
        return even_double(count+1, lst)

## odd_double(count, lst) returns (listof Str) for the odd num in sym_tri_num
## odd_double: Nat (listof Str) -> (listof Str)
def odd_double(count, lst):
    if count == len(lst):
        return lst
    else:
        lst[count] = lst[count][0:(len(lst[count])//2)] + lst[count][(len(lst[count])//2)+1:(len(lst[count]))]
        return odd_double(count+1, lst)
## ternary_Decimal(num) returns trinary number for decimal number given
## ternary_Decimal: Nat -> Str
def ternary_Decimal (num):
    if num == 0:
        return '0'
    nums = []
    while num:
        num, r = divmod(num, 3)
        nums.append(str(r))
    return ''.join(reversed(nums))
## list_create(num, count, lst, leng) returns a lst that has all of the possible
##       values for the num length
## list_create: Nat Nat (listof Str) Nat -> (listof Str)
def list_create(num, count, lst, leng):
    if num == count:
        return lst
    else:
        if len(ternary_Decimal(count)) == leng:
            lst.append(ternary_Decimal(count))
            return list_create(num, count+1, lst, leng)
        else:
            lst.append((leng-len(ternary_Decimal(count)))*'0' + (ternary_Decimal(count)))
            return list_create(num, count+1, lst, leng)

## Testing for sym_tri_num(num)
check.expect("TEST1", sym_tri_num(1), ['0', '1', '2'])
check.expect("TEST2", sym_tri_num(3), ['000','010','020','101','111','121','202','212','222'])
check.expect("TEST3", sym_tri_num(4), ['0000','0110','0220','1001','1111','1221','2002','2112','2222'])
check.expect("TEST4", sym_tri_num(0), [])
check.expect("TEST5", sym_tri_num(10), ['0000000000', '0000110000', '0000220000', '0001001000', '0001111000', '0001221000', '0002002000', '0002112000', '0002222000', '0010000100', '0010110100', '0010220100', '0011001100', '0011111100', '0011221100', '0012002100', '0012112100', '0012222100', '0020000200', '0020110200', '0020220200', '0021001200', '0021111200', '0021221200', '0022002200', '0022112200', '0022222200', '0100000010', '0100110010', '0100220010', '0101001010', '0101111010', '0101221010', '0102002010', '0102112010', '0102222010', '0110000110', '0110110110', '0110220110', '0111001110', '0111111110', '0111221110', '0112002110', '0112112110', '0112222110', '0120000210', '0120110210', '0120220210', '0121001210', '0121111210', '0121221210', '0122002210', '0122112210', '0122222210', '0200000020', '0200110020', '0200220020', '0201001020', '0201111020', '0201221020', '0202002020', '0202112020', '0202222020', '0210000120', '0210110120', '0210220120', '0211001120', '0211111120', '0211221120', '0212002120', '0212112120', '0212222120', '0220000220', '0220110220', '0220220220', '0221001220', '0221111220', '0221221220', '0222002220', '0222112220', '0222222220', '1000000001', '1000110001', '1000220001', '1001001001', '1001111001', '1001221001', '1002002001', '1002112001', '1002222001', '1010000101', '1010110101', '1010220101', '1011001101', '1011111101', '1011221101', '1012002101', '1012112101', '1012222101', '1020000201', '1020110201', '1020220201', '1021001201', '1021111201', '1021221201', '1022002201', '1022112201', '1022222201', '1100000011', '1100110011', '1100220011', '1101001011', '1101111011', '1101221011', '1102002011', '1102112011', '1102222011', '1110000111', '1110110111', '1110220111', '1111001111', '1111111111', '1111221111', '1112002111', '1112112111', '1112222111', '1120000211', '1120110211', '1120220211', '1121001211', '1121111211', '1121221211', '1122002211', '1122112211', '1122222211', '1200000021', '1200110021', '1200220021', '1201001021', '1201111021', '1201221021', '1202002021', '1202112021', '1202222021', '1210000121', '1210110121', '1210220121', '1211001121', '1211111121', '1211221121', '1212002121', '1212112121', '1212222121', '1220000221', '1220110221', '1220220221', '1221001221', '1221111221', '1221221221', '1222002221', '1222112221', '1222222221', '2000000002', '2000110002', '2000220002', '2001001002', '2001111002', '2001221002', '2002002002', '2002112002', '2002222002', '2010000102', '2010110102', '2010220102', '2011001102', '2011111102', '2011221102', '2012002102', '2012112102', '2012222102', '2020000202', '2020110202', '2020220202', '2021001202', '2021111202', '2021221202', '2022002202', '2022112202', '2022222202', '2100000012', '2100110012', '2100220012', '2101001012', '2101111012', '2101221012', '2102002012', '2102112012', '2102222012', '2110000112', '2110110112', '2110220112', '2111001112', '2111111112', '2111221112', '2112002112', '2112112112', '2112222112', '2120000212', '2120110212', '2120220212', '2121001212', '2121111212', '2121221212', '2122002212', '2122112212', '2122222212', '2200000022', '2200110022', '2200220022', '2201001022', '2201111022', '2201221022', '2202002022', '2202112022', '2202222022', '2210000122', '2210110122', '2210220122', '2211001122', '2211111122', '2211221122', '2212002122', '2212112122', '2212222122', '2220000222', '2220110222', '2220220222', '2221001222', '2221111222', '2221221222', '2222002222', '2222112222', '2222222222'])
    

    
